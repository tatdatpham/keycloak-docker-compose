pipeline {
    agent { label 'maven' }
    options {
        skipStagesAfterUnstable()
    }

    environment {
        NVD_API_KEY = credentials('NVD_API_KEY') // Replace with the ID of the Jenkins credential
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('SCA') {
            when {
                expression {
                    currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                script {
                    dependencyCheck additionalArguments: '--scan src --format XML --out target --nvdApiKey ${env.NVD_API_KEY} --data /usr/share/dependency-check/data', odcInstallation: 'OWASP-Dependency-Check'
                }
            }
            post {
                always {
                    dependencyCheckPublisher pattern: 'target/dependency-check-report.xml'
                }
            }
        }

        stage('SAST') {
            steps {
                script {
                    def scannerHome = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv() {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=tatdatpham_simple-java-maven-app_AY-b0cN30Ha0ksPS5rmH -Dsonar.sources=src -Dsonar.java.binaries=target/classes"
                    }
                }
            } 
        }

        stage('Coverage') {
            steps {
                sh 'mvn jacoco:prepare-agent test jacoco:report' // generate JaCoCo coverage report
                jacoco(execPattern: '**/target/jacoco.exec', classPattern: '**/target/classes', sourcePattern: '**/src/main/java')
            }
        }
        
        stage('Publish') {
            steps {
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'target/site/jacoco',
                    reportFiles: 'index.html',
                    reportName: 'JaCoCo Code Coverage'
                ])
            }
        }


        stage('Deliver') { 
            steps {
                sh 'echo "Deliver"' 
            }
        }
    }
}