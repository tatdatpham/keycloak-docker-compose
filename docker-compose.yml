name: devsecops

services:
  postgres:
    image: ${KEYCLOAK_POSTGRES_IMAGE_TAG}
    container_name: keycloak_postgres
    volumes:
      - keycloak-postgres:/var/lib/postgresql/data
    environment:
      POSTGRESQL_DATABASE: ${KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    networks:
      - keycloak-network
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${KEYCLOAK_DB_NAME}",
          "-U",
          "${KEYCLOAK_DB_USER}",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  keycloak:
    image: ${KEYCLOAK_IMAGE_TAG}
    container_name: keycloak
    environment:
      KEYCLOAK_DATABASE_VENDOR: ${KEYCLOAK_DB_TYPE}
      KEYCLOAK_DATABASE_HOST: postgres
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: ${KEYCLOAK_DB_NAME}
      KEYCLOAK_DATABASE_USER: ${KEYCLOAK_DB_USER}
      KEYCLOAK_DATABASE_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_DATABASE_SCHEMA: public
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_CREATE_ADMIN_USER: true
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: "true"
      KEYCLOAK_ENABLE_STATISTICS: "true"
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: "true"
      KC_HTTP_ENABLED: "true"
    networks:
      - keycloak-network
      - traefik-network
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_HOSTNAME}`)"
      - "traefik.http.routers.keycloak.service=keycloak"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.services.keycloak.loadbalancer.passhostheader=true"
      - "traefik.http.routers.keycloak.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    container_name: traefik
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.ping.address=:8082"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping", "--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    image: ${KEYCLOAK_POSTGRES_IMAGE_TAG}
    container_name: keycloak_postgres_backups
    command: >-
      sh -c 'sleep $KEYCLOAK_BACKUP_INIT_SLEEP &&
      while true; do
        pg_dump -h postgres -p 5432 -d $KEYCLOAK_DB_NAME -U $KEYCLOAK_DB_USER | gzip > $KEYCLOAK_POSTGRES_BACKUPS_PATH/$KEYCLOAK_POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
        find $KEYCLOAK_POSTGRES_BACKUPS_PATH -type f -mtime +$KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
        sleep $KEYCLOAK_BACKUP_INTERVAL; done'
    volumes:
      - keycloak-postgres-backup:/var/lib/postgresql/data
      - keycloak-database-backups:${KEYCLOAK_POSTGRES_BACKUPS_PATH}
    environment:
      KEYCLOAK_DB_NAME: ${KEYCLOAK_DB_NAME}
      KEYCLOAK_DB_USER: ${KEYCLOAK_DB_USER}
      PGPASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_BACKUP_INIT_SLEEP: ${KEYCLOAK_BACKUP_INIT_SLEEP}
      KEYCLOAK_BACKUP_INTERVAL: ${KEYCLOAK_BACKUP_INTERVAL}
      KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS: ${KEYCLOAK_POSTGRES_BACKUP_PRUNE_DAYS}
      KEYCLOAK_POSTGRES_BACKUPS_PATH: ${KEYCLOAK_POSTGRES_BACKUPS_PATH}
      KEYCLOAK_POSTGRES_BACKUP_NAME: ${KEYCLOAK_POSTGRES_BACKUP_NAME}
    networks:
      - keycloak-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  nexus:
    image: ${NEXUS_IMAGE_TAG}
    container_name: nexus
    ports:
      - ${NEXUS_PORT}:8081
    volumes:
      - "/opt/nexus/:/var/lib/nexus"

  jenkins:
    image: ${JENKINS_IMAGE_TAG}
    container_name: jenkins
    networks:
      - devops-network
      - traefik-network
    ports:
      - ${JENKINS_PORT}:8080
      - 50000:50000
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    volumes:
      - "$PWD/jenkins_home:/var/jenkins_home"
      - jenkins-docker-certs:/certs/client
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    privileged: true
    user: root
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`${JENKINS_HOSTNAME}`)"
      - "traefik.http.routers.jenkins.service=jenkins"
      - "traefik.http.routers.jenkins.entrypoints=websecure"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
      - "traefik.http.routers.jenkins.tls=true"
      - "traefik.http.routers.jenkins.tls.certresolver=letsencrypt"
      - "traefik.http.services.jenkins.loadbalancer.passhostheader=true"
      - "traefik.http.routers.jenkins.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped

  jenkins-agent:
    image: jenkins/inbound-agent
    container_name: jenkins-agent
    restart: always
    environment:
      - JENKINS_URL=https://${JENKINS_HOSTNAME}
      - JENKINS_AGENT_NAME=jnlp-agent
      - JENKINS_SECRET=${JENKINS_SECRET}
    depends_on:
      - jenkins

  sonarqube:
    image: ${SONAQUBE_IMAGE_TAG}
    container_name: sonarqube
    restart: always
    ports:
      - ${SONAQUBE_PORT}:9000
    networks:
      - devops-network
      - traefik-network
    depends_on:
      - sonardb
    links:
      - sonardb
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonardb:5432/${SONAQUBE_DB_NAME}
      - SONARQUBE_JDBC_USERNAME=${SONAQUBE_DB_USER}
      - SONARQUBE_JDBC_PASSWORD=${SONAQUBE_DB_PASSWORD}
    volumes:
      - "/opt/sonar/:/var/lib/sonar"
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`${SONAQUBE_HOSTNAME}`)"
      - "traefik.http.routers.sonarqube.service=sonarqube"
      - "traefik.http.routers.sonarqube.entrypoints=websecure"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
      - "traefik.http.routers.sonarqube.tls=true"
      - "traefik.http.routers.sonarqube.tls.certresolver=letsencrypt"
      - "traefik.http.services.sonarqube.loadbalancer.passhostheader=true"
      - "traefik.http.routers.sonarqube.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"

  sonardb:
    image: ${POSTGRES_IMAGE_TAG}
    container_name: postgres
    restart: always
    environment:
      - POSTGRESQL_DB=${SONAQUBE_DB_NAME}
      - POSTGRES_USER=${SONAQUBE_DB_USER}
      - POSTGRES_PASSWORD=${SONAQUBE_DB_PASSWORD}
    networks:
      - devops-network
    volumes:
      - "/opt/postgres:/var/lib/postgresql"

  gerrit:
    image: ${GERRIT_IMAGE_TAG}
    container_name: gerrit
    volumes:
      - gerrit-git-volume:/var/gerrit/git
      - gerrit-index-volume:/var/gerrit/index
      - gerrit-cache-volume:/var/gerrit/cache
      - ./config/gerrit/docker-entrypoint.sh:/docker-entrypoint.sh # Mount the updated entrypoint script
    ports:
      - "29418:29418"
    networks:
      - devops-network
      - traefik-network
    entrypoint: ["/bin/sh", "-c", "/docker-entrypoint.sh"] # Ensure entrypoint is set correctly
    environment:
      - CANONICAL_WEB_URL=https://${GERRIT_HOSTNAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gerrit.rule=Host(`${GERRIT_HOSTNAME}`)"
      - "traefik.http.routers.gerrit.service=gerrit"
      - "traefik.http.routers.gerrit.entrypoints=websecure"
      - "traefik.http.services.gerrit.loadbalancer.server.port=8080"
      - "traefik.http.routers.gerrit.tls=true"
      - "traefik.http.routers.gerrit.tls.certresolver=letsencrypt"
      - "traefik.http.services.gerrit.loadbalancer.passhostheader=true"
      - "traefik.http.routers.gerrit.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"

  # Monitoring
  prometheus:
    container_name: prometheus
    image: ${PROMETHEUS_IMAGE_TAG}
    ports:
      - ${PROMETHEUS_PORT}:9090
    networks:
      - monitor-network
      - traefik-network
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
    privileged: true
    depends_on:
      - cadvisor
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_HOSTNAME}`)"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.passhostheader=true"
      - "traefik.http.routers.prometheus.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"

  cadvisor:
    container_name: cadvisor
    image: ${CADVISOR_IMAGE_TAG}
    ports:
      - ${CADVISOR_PORT}:8080
    networks:
      - monitor-network
      - traefik-network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.rule=Host(`${CADVISOR_HOSTNAME}`)"
      - "traefik.http.routers.cadvisor.service=cadvisor"
      - "traefik.http.routers.cadvisor.entrypoints=websecure"
      - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
      - "traefik.http.routers.cadvisor.tls=true"
      - "traefik.http.routers.cadvisor.tls.certresolver=letsencrypt"
      - "traefik.http.services.cadvisor.loadbalancer.passhostheader=true"
      - "traefik.http.routers.cadvisor.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"
    depends_on:
      - redis

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - monitor-network

  grafana:
    container_name: grafana
    image: ${GRAFANA_IMAGE_TAG}
    ports:
      - ${GRAFANA_PORT}:3000
    networks:
      - monitor-network
      - traefik-network
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - DS_PROMETHEUS=prometheus
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./config/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "./config/dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./config/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
    privileged: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOSTNAME}`)"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.passhostheader=true"
      - "traefik.http.routers.grafana.middlewares=compresstraefik"
      - "traefik.http.middlewares.compresstraefik.compress=true"
      - "traefik.docker.network=traefik-network"
    depends_on:
      - prometheus

networks:
  keycloak-network:
    name: keycloak-network
    external: true
  traefik-network:
    name: traefik-network
    external: true
  devops-network:
    name: devops-network
    external: true
  monitor-network:
    name: monitor-network
    external: true

volumes:
  keycloak-postgres:
  keycloak-postgres-backup:
  keycloak-database-backups:
  traefik-certificates:
  grafana-data:
  jenkins-docker-certs:
  gerrit-git-volume:
  gerrit-index-volume:
  gerrit-cache-volume:
